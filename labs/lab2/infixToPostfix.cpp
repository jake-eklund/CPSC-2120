/*
 * Name: Jake Eklund
 * Date Submitted: September 18
 * Lab Section: 007
 * Assignment Name: Lab 2: Infix to Postfix Conversion
 */

#include <string>
#include <stack>
#include <iostream>

using namespace std;

//takes in the sign and then determines where it falls using order of operations
//it then returns a number equal to that place in order of operations so put the
//signs in the correct order

int orderOfOperations(char sign) {
    // const char* str = sign.c_str();

    if (sign == '+' || sign == '-') {
        return 1;
    }
    else if (sign == '*' || sign == '/' || sign == '%') {
        return 2;
    }
    else {
        return 0;
    }
}

//this checks that there is a correct number of parantheses and that they
//are aligned correctly

bool paranthesis(string infix[], int length) {
    int left = 0, right = 0;

    for (int i = 0; i < length; i++) {
        if (infix[i][0] == '(') {
            left++;
        }
        else if (infix[i][0] == ')') {
            right++;
        }
    }

    if (left == right) {
        return true;
    }
    else {
        return false;
    }
}

//Converts an infix arithmetic expression into postfix
//The function takes 3 parameters
//First parameter: array of strings for infix expression
//    each string is either an integer number or operator symbol
//Second parameter: number of strings in infix expression
//Third parameter: array of strings for postfix expression
//    generated by function, same format as first parameter
//    assumes that postfix is at least the size of postfix
//Return value: int, number of strings in postfix expression
//    Returns 0 if an error is encountered when converting expression
//    An error occurs with a mismatched parenthesis, e.g. ( ( ) or ( ) ) etc.
//Operator symbols:
// ( : left parenthesis, all operations between this and ")" take place first
// ) : right parenthesis, all op.s back to previous "(" take place first
// * : multiplication, higher precedence - takes place before "+" and "-"
// / : division, higher precedence - takes place before "+" and "-"
// % : remainder, higher precedence - takes place before "+" and "-"
// + : addition, lower precedence - takes place after "*" , "/" , "%"
// - : subtraction, lower precedence - takes place after "*" , "/" , "%"
//The function is not specified to work with any other operator symbols
//Any string in infix may be assumed to be an integer operand if none
// of the above symbols

int infixToPostfix(string infix[], int length, string postfix[]) {
    
    if (!paranthesis(infix, length)) {
        return 0;
    }

    stack <string> myStack;
    myStack.push("~");

    int size = 0, num = 0, num2 = 0, total = 0, value = length;

    for (int i = 0; i < length; i++) {
        if (isdigit(infix[i][0])) {
            postfix[size++] = infix[i];
        }
        else if (infix[i][0] == '(') {
            myStack.push(infix[i]);
            total++;
            num++;
        }
        else if (infix[i][0] == ')') {
            while(myStack.top()[0] != '~' && myStack.top()[0] != '(') {
                string store = myStack.top();
                myStack.pop();
                postfix[size++] = store;
            }

            total++;
            num2++;

            if (myStack.top()[0] == '(') {
                myStack.pop();
            }
        }
        else {
            while (myStack.top() != "~" && orderOfOperations(infix[i][0]) <= orderOfOperations(myStack.top()[0])) {
                string store = myStack.top();
                myStack.pop();
                postfix[size++] = store;
            }

            myStack.push(infix[i]);
        }
    }
        value -= total;

        if (num2 != num) {
            value = 0;
        }
        else {
            for (size = size; size < value; size++) {
                postfix[size] = myStack.top();
                myStack.pop();
            }
        }
    
    return value;
}

//Main function to test infixToPostfix()
//Should convert 2 + 3 * 4 + ( 5 - 6 + 7 ) * 8
//            to 2 3 4 * + 5 6 - 7 + 8 * +

/*
int main() {
    string infixExp[] = {"2", "+", "3", "*", "4", "+", "(",
                         "5", "-", "6", "+", "7", ")", "*",
                         "8"};
    string postfixExp[15];
    int postfixLength;

    cout << "Infix expression: ";
    for (int i=0; i<15; i++)
    {
        cout << infixExp[i] << " ";
    }
    cout << endl;
    cout << "Length: 15" << endl << endl;

    postfixLength = infixToPostfix(infixExp, 15, postfixExp);

    cout << "Postfix expression: ";
    for (int i=0; i<postfixLength; i++)
    {
        cout << postfixExp[i] << " ";
    }
    cout << endl;
    cout << "Length: " << postfixLength << endl;
    
    return 0;
}
*/